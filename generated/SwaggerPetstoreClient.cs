// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using SwaggerPetstore.Models;

namespace SwaggerPetstore
{
    /// <summary> The SwaggerPetstore service client. </summary>
    public partial class SwaggerPetstoreClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal SwaggerPetstoreRestClient RestClient { get; }

        /// <summary> Initializes a new instance of SwaggerPetstoreClient for mocking. </summary>
        protected SwaggerPetstoreClient()
        {
        }

        /// <summary> Initializes a new instance of SwaggerPetstoreClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal SwaggerPetstoreClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new SwaggerPetstoreRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> List all pets. </summary>
        /// <param name="limit"> How many items to return at one time (max 100). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<Pet>>> ListPetsAsync(int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SwaggerPetstoreClient.ListPets");
            scope.Start();
            try
            {
                return await RestClient.ListPetsAsync(limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all pets. </summary>
        /// <param name="limit"> How many items to return at one time (max 100). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<Pet>> ListPets(int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SwaggerPetstoreClient.ListPets");
            scope.Start();
            try
            {
                return RestClient.ListPets(limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a pet. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreatePetsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SwaggerPetstoreClient.CreatePets");
            scope.Start();
            try
            {
                return await RestClient.CreatePetsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a pet. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreatePets(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SwaggerPetstoreClient.CreatePets");
            scope.Start();
            try
            {
                return RestClient.CreatePets(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Info for a specific pet. </summary>
        /// <param name="petId"> The id of the pet to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Pet>> ShowPetByIdAsync(string petId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SwaggerPetstoreClient.ShowPetById");
            scope.Start();
            try
            {
                return await RestClient.ShowPetByIdAsync(petId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Info for a specific pet. </summary>
        /// <param name="petId"> The id of the pet to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Pet> ShowPetById(string petId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SwaggerPetstoreClient.ShowPetById");
            scope.Start();
            try
            {
                return RestClient.ShowPetById(petId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
